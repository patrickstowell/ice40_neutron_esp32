#pragma once
#include <Preferences.h>

namespace CONFIG {

    RTC_DATA_ATTR int BOOT_COUNT = 0;
    RTC_DATA_ATTR String APN_NAME = ""; // EEPROM
    RTC_DATA_ATTR String USER_NAME = ""; // EEPROM
    RTC_DATA_ATTR String PASS_NAME = ""; // EEPROM
    RTC_DATA_ATTR int PMT_HV = 1200; // EEPROM
    RTC_DATA_ATTR int SLEEP_SEC = 20; // EEPROM
    RTC_DATA_ATTR String WIFI_SSID = "ESP32_NEUTRON"; // EEPROM
    RTC_DATA_ATTR String WIFI_PSWD = "neutrons2025"; // EEPROM
    RTC_DATA_ATTR bool WIFI_ENABLED = true; // EEPROM
    RTC_DATA_ATTR bool OTA_ENABLED = true; // EEPROM
    RTC_DATA_ATTR bool DEEPSLEEP_ENABLED = false; // EEPROM
    RTC_DATA_ATTR bool SERVER_ENABLED = true; // EEPROM

    RTC_DATA_ATTR bool NEUTRON_CH1_ENABLED = 1;

    RTC_DATA_ATTR uint8_t NEUTRON_I2C_BYTE01 = 0;
    RTC_DATA_ATTR uint8_t NEUTRON_I2C_BYTE02 = 24;
    RTC_DATA_ATTR uint8_t NEUTRON_I2C_BYTE03 = 48;
    RTC_DATA_ATTR uint8_t NEUTRON_I2C_BYTE04 = 96;
    RTC_DATA_ATTR uint8_t NEUTRON_I2C_BYTE05 = 0;
    RTC_DATA_ATTR uint8_t NEUTRON_I2C_BYTE06 = 0;
    RTC_DATA_ATTR uint8_t NEUTRON_I2C_BYTE07 = 12;
    RTC_DATA_ATTR uint8_t NEUTRON_I2C_BYTE08 = 0;
    RTC_DATA_ATTR uint8_t NEUTRON_I2C_BYTE09 = 34;
    RTC_DATA_ATTR uint8_t NEUTRON_I2C_BYTE0A = 0;
    RTC_DATA_ATTR uint8_t NEUTRON_I2C_BYTE0B = 0;
    RTC_DATA_ATTR uint8_t NEUTRON_I2C_BYTE0C = 0;
    RTC_DATA_ATTR uint8_t NEUTRON_I2C_BYTE0D = 0;
    RTC_DATA_ATTR uint8_t NEUTRON_I2C_BYTE0E = 0;
    RTC_DATA_ATTR uint8_t NEUTRON_I2C_BYTE0F = 0;
    RTC_DATA_ATTR uint8_t NEUTRON_I2C_BYTE10 = 0;
    RTC_DATA_ATTR uint8_t NEUTRON_I2C_BYTE11 = 0;
    RTC_DATA_ATTR uint8_t NEUTRON_I2C_BYTE12 = 0;
    RTC_DATA_ATTR uint8_t NEUTRON_I2C_BYTE13 = 0;
    RTC_DATA_ATTR uint8_t NEUTRON_I2C_BYTE14 = 0;
    RTC_DATA_ATTR uint8_t NEUTRON_I2C_BYTE15 = 0;
    RTC_DATA_ATTR uint8_t NEUTRON_I2C_BYTE16 = 0;
    RTC_DATA_ATTR uint8_t NEUTRON_I2C_BYTE17 = 0;
    RTC_DATA_ATTR uint8_t NEUTRON_I2C_BYTE18 = 0;
    RTC_DATA_ATTR uint8_t NEUTRON_I2C_BYTE19 = 0;

    RTC_DATA_ATTR bool NEUTRON_ENABLED = 1; // EEPROM
    RTC_DATA_ATTR int64_t NEUTRON_START = 0;
    RTC_DATA_ATTR bool NEUTRON_RUNNING = 0;
    RTC_DATA_ATTR bool NEUTRON_STOP = 1;
    RTC_DATA_ATTR int64_t NEUTRON_EXPOSURE = 10;

    RTC_DATA_ATTR bool WATCHDOG_ENABLED = 0; // EEPROM

    RTC_DATA_ATTR bool I2C_ON = 0;
    RTC_DATA_ATTR bool UART_ON = 0;
    RTC_DATA_ATTR bool SDI12_ON = 0;
    RTC_DATA_ATTR bool SPI_ON = 0;

    RTC_DATA_ATTR bool GPS_ENABLED = true; // EEPROM
    RTC_DATA_ATTR bool GPS_FOUND = true;
    RTC_DATA_ATTR bool SD_ENABLED = true;

    RTC_DATA_ATTR uint16_t HVTARGET = 1150; // EEPROM
    RTC_DATA_ATTR uint16_t HVLIMIT = 1300; // EEPROM
    RTC_DATA_ATTR uint16_t RAMPSPEED = 10; // EEPROM
    RTC_DATA_ATTR uint16_t THRESHOLD1 = 100; // EEPROM
    RTC_DATA_ATTR uint16_t THRESHOLD2 = 1000; // EEPROM
    RTC_DATA_ATTR uint8_t EEPROMCHOICE = 3; // EEPROM

    RTC_DATA_ATTR bool enable_ch1 = 0; // EEPROM
    RTC_DATA_ATTR bool enable_ch2 = 0;// EEPROM
    RTC_DATA_ATTR bool invertlogic_ch1 = 0; // EEPROM
    RTC_DATA_ATTR bool invertlogic_ch2 = 0; // EEPROM
    RTC_DATA_ATTR bool edgeonly_ch1 = 0; // EEPROM
    RTC_DATA_ATTR bool edgeonly_ch2 = 0; // EEPROM
    RTC_DATA_ATTR bool pulser_ch1 = 0; // EEPROM
    RTC_DATA_ATTR bool pulser_ch2 = 0; // EEPROM

};

namespace DATA {

    RTC_DATA_ATTR bool SD_FOUND = true;


};
